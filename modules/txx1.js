const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const botTokenSecondary = '8170107416:AAHcBBkltzYQ44XMvMvb3gc3ktNkZgPPGRw'; // Token bot ph·ª•
const botSecondary = new TelegramBot(botTokenSecondary, { polling: true });

// ID v√† link c·ªßa group chat c·ªë ƒë·ªãnh
const fixedChatId = '1002624604645'; // Thay b·∫±ng ID nh√≥m
const groupLink = 'https://t.me/+kA7nfEhfym8xN2Rl'; // Thay b·∫±ng link nh√≥m

// ƒê∆∞·ªùng d·∫´n file l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
const usersFile = './modules/users.json';

// ƒê·ªçc d·ªØ li·ªáu ng∆∞·ªùi ch∆°i t·ª´ users.json
function getUserData(userId) {
    if (!fs.existsSync(usersFile)) return null;
    const data = JSON.parse(fs.readFileSync(usersFile, 'utf8'));
    return data[userId] || null;
}

// C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi ch∆°i trong users.json
function updateUserData(userId, userData) {
    let data = {};
    if (fs.existsSync(usersFile)) {
        data = JSON.parse(fs.readFileSync(usersFile, 'utf8'));
    }
    data[userId] = userData;
    fs.writeFileSync(usersFile, JSON.stringify(data, null, 2));
}

module.exports = {
    name: "txx1",
    description: "Ch∆°i T√†i X·ªâu V2 v·ªõi Token bot ph·ª•",
    execute: async (botMain, msg, args) => {
        const userId = msg.from.id.toString();  // Chuy·ªÉn ID sang string
        const username = msg.from.username || msg.from.first_name;
        const betChoice = args[0] && (args[0].toLowerCase() === "t√†i" || args[0].toLowerCase() === "x·ªâu") ? args[0].toLowerCase() : null;
        const betAmount = args[1] ? parseInt(args[1]) : 0;

        if (!betChoice) {
            return botMain.sendMessage(msg.chat.id, "‚ö†Ô∏è Vui l√≤ng ch·ªçn T√†i ho·∫∑c X·ªâu. V√≠ d·ª•: /txx1 t√†i ho·∫∑c /txx1 x·ªâu.");
        }

        if (betAmount <= 0) {
            return botMain.sendMessage(msg.chat.id, "‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p s·ªë xu c∆∞·ª£c h·ª£p l·ªá.");
        }

        let userData = getUserData(userId);
        if (!userData) {
            userData = { username, xu: 1000 };  // Ng∆∞·ªùi ch∆°i m·ªõi, m·∫∑c ƒë·ªãnh c√≥ 1000 xu
        }

        // Ki·ªÉm tra s·ªë d∆∞
        if (userData.xu < betAmount) {
            return botMain.sendMessage(msg.chat.id, `‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ c∆∞·ª£c. B·∫°n ch·ªâ c√≥ ${userData.xu} xu.`);
        }

        // Tr·ª´ xu khi c∆∞·ª£c
        userData.xu -= betAmount;

        // Quay T√†i X·ªâu
        try {
            const roll = Math.random() < 0.5 ? "t√†i" : "x·ªâu"; // X√°c su·∫•t 50-50
            const result = roll === betChoice ? "th·∫Øng" : "thua";

            let message = `üé≤ **K·∫øt qu·∫£ T√†i X·ªâu**: ${roll.toUpperCase()}\n`;
            message += `üí∞ B·∫°n ch·ªçn: ${betChoice.toUpperCase()}\n`;

            if (result === "th·∫Øng") {
                const winnings = betAmount * 2;  // Th·∫Øng nh·∫≠n g·∫•p ƒë√¥i s·ªë ti·ªÅn c∆∞·ª£c
                userData.xu += winnings;
                message += `üèÜ **Ch√∫c m·ª´ng! B·∫°n th·∫Øng!**\n`;
                message += `üéâ B·∫°n nh·∫≠n ƒë∆∞·ª£c ${winnings} xu!\n`;
            } else {
                message += `üòû **R·∫•t ti·∫øc, b·∫°n thua!**\n`;
                message += `üíî B·∫°n ƒë√£ m·∫•t ${betAmount} xu!\n`;
            }

            // C·∫≠p nh·∫≠t d·ªØ li·ªáu
            updateUserData(userId, userData);

            // G·ª≠i k·∫øt qu·∫£ l√™n group chat c·ªë ƒë·ªãnh b·∫±ng bot ph·ª•
            botSecondary.sendMessage(fixedChatId, message);

            // Ngay l·∫≠p t·ª©c g·ª≠i link nh√≥m ƒë·ªÉ ng∆∞·ªùi d√πng tham gia
            botMain.sendMessage(msg.chat.id, `üîî **Tham gia nh√≥m chat ƒë·ªÉ theo d√µi k·∫øt qu·∫£**: [Nh·∫•n v√†o ƒë√¢y](${groupLink})`, { parse_mode: "Markdown" });

        } catch (error) {
            botMain.sendMessage(msg.chat.id, "‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!");
            console.error("[T√†i X·ªâu ERROR]", error);
        }
    }
};
