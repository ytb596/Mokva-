const fs = require('fs');

const RULES_FILE = 'rules.json';

module.exports = {
  name: 'luatnhom',
  description: 'Qu·∫£n l√Ω lu·∫≠t nh√≥m!',
  execute(bot, msg, args) {
    const chatId = msg.chat.id;

    // ƒê·ªçc lu·∫≠t t·ª´ file (n·∫øu c√≥)
    let rules = {};
    if (fs.existsSync(RULES_FILE)) {
      rules = JSON.parse(fs.readFileSync(RULES_FILE, 'utf8'));
    }

    // L·ªánh "xem lu·∫≠t"
    if (!args.length) {
      const groupRules = rules[chatId] || ["‚ùå Nh√≥m n√†y ch∆∞a c√≥ lu·∫≠t n√†o."];
      return bot.sendMessage(chatId, `üìú **Lu·∫≠t nh√≥m:**\n\n${groupRules.join("\n")}`);
    }

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i admin kh√¥ng
    bot.getChatMember(chatId, msg.from.id).then(member => {
      if (!["administrator", "creator"].includes(member.status)) {
        return bot.sendMessage(chatId, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a lu·∫≠t nh√≥m.");
      }

      const command = args[0].toLowerCase();

      if (command === "add") {
        const newRule = args.slice(1).join(" ");
        if (!newRule) return bot.sendMessage(chatId, "‚ö†Ô∏è H√£y nh·∫≠p n·ªôi dung lu·∫≠t c·∫ßn th√™m!");

        rules[chatId] = rules[chatId] || [];
        rules[chatId].push(`üîπ ${newRule}`);
      } else if (command === "remove") {
        const index = parseInt(args[1]);
        if (isNaN(index) || !rules[chatId] || !rules[chatId][index - 1]) {
          return bot.sendMessage(chatId, "‚ö†Ô∏è S·ªë th·ª© t·ª± lu·∫≠t kh√¥ng h·ª£p l·ªá.");
        }
        rules[chatId].splice(index - 1, 1);
      } else if (command === "clear") {
        delete rules[chatId];
      } else {
        return bot.sendMessage(chatId, "‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá! D√πng: `add`, `remove [s·ªë]`, ho·∫∑c `clear`.");
      }

      // L∆∞u l·∫°i lu·∫≠t m·ªõi
      fs.writeFileSync(RULES_FILE, JSON.stringify(rules, null, 2));

      bot.sendMessage(chatId, "‚úÖ Lu·∫≠t nh√≥m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    });
  }
};
