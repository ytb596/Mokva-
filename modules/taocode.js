const fs = require("fs");

const usersFile = "./modules/users.json";
const codesFile = "./modules/giftcodes.json";

// H√†m chuy·ªÉn ƒë·ªïi th·ªùi gian (VD: "10m" => 600000 ms)
function parseDuration(time) {
    const timeMap = { s: 1000, m: 60 * 1000, h: 60 * 60 * 1000, d: 24 * 60 * 60 * 1000 };
    const match = time.match(/^(\d+)([smhd])(?:\s*(GMT[+-]?\d{1,2}|UTC))?$/);
    if (!match) return null;

    const value = parseInt(match[1], 10);
    const unit = match[2];
    const timezone = match[3] || "UTC"; // M·∫∑c ƒë·ªãnh UTC n·∫øu kh√¥ng c√≥

    return { duration: value * timeMap[unit], timezone };
}

// H√†m t·∫°o m√£ ng·∫´u nhi√™n
function generateCode(length = 8) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join("");
}

// Chuy·ªÉn ƒë·ªïi gi·ªù UTC sang m√∫i gi·ªù c·ª• th·ªÉ
function convertToTimezone(timestamp, timezone) {
    const offset = timezone.startsWith("GMT") ? parseInt(timezone.replace("GMT", ""), 10) : 0;
    return new Date(timestamp + offset * 60 * 60 * 1000);
}

module.exports = {
    name: "taocode",
    execute: async (bot, msg, args) => {
        const userId = msg.from.id.toString();
        const adminId = "8014033911"; // ID admin

        if (userId !== adminId) {
            return bot.sendMessage(msg.chat.id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o m√£ qu√† t·∫∑ng.");
        }

        // Ki·ªÉm tra gi√° tr·ªã xu h·ª£p l·ªá
        const amount = parseInt(args[0]);
        if (isNaN(amount) || amount <= 0) {
            return bot.sendMessage(msg.chat.id, "‚ùå Vui l√≤ng nh·∫≠p s·ªë xu h·ª£p l·ªá.");
        }

        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n (VD: `1h GMT+7`)
        const timeArg = args[1] || "1h UTC"; // M·∫∑c ƒë·ªãnh l√† 1 gi·ªù UTC
        const parsedTime = parseDuration(timeArg);
        if (!parsedTime) {
            return bot.sendMessage(msg.chat.id, "‚ùå Vui l√≤ng nh·∫≠p th·ªùi gian h·ª£p l·ªá (VD: `10m UTC`, `1h GMT+7`, `2d GMT-5`).");
        }

        const { duration, timezone } = parsedTime;
        const expiresAt = Date.now() + duration;
        const formattedExpiresAt = convertToTimezone(expiresAt, timezone).toLocaleString("en-US", { timeZone: "UTC" });

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng ng∆∞·ªùi c√≥ th·ªÉ nh·∫≠p
        const maxUses = parseInt(args[2]) || 1; // M·∫∑c ƒë·ªãnh 1 ng∆∞·ªùi d√πng

        if (isNaN(maxUses) || maxUses <= 0) {
            return bot.sendMessage(msg.chat.id, "‚ùå Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng ng∆∞·ªùi c√≥ th·ªÉ nh·∫≠p h·ª£p l·ªá.");
        }

        // T·∫°o m√£ qu√† t·∫∑ng
        const code = generateCode(8);

        // ƒê·ªçc danh s√°ch m√£ c≈© (n·∫øu c√≥)
        let codes = {};
        if (fs.existsSync(codesFile)) {
            try {
                codes = JSON.parse(fs.readFileSync(codesFile, "utf-8"));
            } catch (error) {
                return bot.sendMessage(msg.chat.id, "‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu m√£ qu√† t·∫∑ng.");
            }
        }

        // L∆∞u m√£ m·ªõi
        codes[code] = {
            value: amount,
            expiresAt: expiresAt, // Th·ªùi gian h·∫øt h·∫°n theo UTC
            formattedExpiresAt, // ƒê·ªãnh d·∫°ng d·ªÖ ƒë·ªçc
            timezone, // M√∫i gi·ªù ƒë∆∞·ª£c ch·ªçn
            maxUses: maxUses, // S·ªë l·∫ßn t·ªëi ƒëa c√≥ th·ªÉ s·ª≠ d·ª•ng
            uses: 0 // S·ªë l·∫ßn ƒë√£ s·ª≠ d·ª•ng
        };

        // Ghi v√†o file
        try {
            fs.writeFileSync(codesFile, JSON.stringify(codes, null, 2));
        } catch (error) {
            return bot.sendMessage(msg.chat.id, "‚ùå L·ªói khi l∆∞u m√£ qu√† t·∫∑ng.");
        }

        bot.sendMessage(
            msg.chat.id,
            `üéÅ M√£ qu√† t·∫∑ng ƒë√£ ƒë∆∞·ª£c t·∫°o: \`${code}\`\nüí∞ Gi√° tr·ªã: ${amount} xu\n‚è≥ H·∫øt h·∫°n v√†o: ${formattedExpiresAt} (${timezone})\nüë• S·ªë ng∆∞·ªùi c√≥ th·ªÉ nh·∫≠p: ${maxUses}`
        );
    }
};
