const fs = require("fs");
const crypto = require("crypto");

const USERS_FILE = "./users.json";
const TOKEN_FILE = "./daily_token.json"; // L∆∞u tr·ªØ Token h√†ng ng√†y
const DAILY_COOLDOWN = 24 * 60 * 60 * 1000; // 24 gi·ªù
const MIN_AMOUNT = 30000;
const MAX_AMOUNT = 70000;

module.exports = {
    name: "daily",
    description: "üéÅ Nh·∫≠n ti·ªÅn h√†ng ng√†y (ch·ªâ 1 ng∆∞·ªùi c√≥ Token h·ª£p l·ªá)",
    execute(bot, msg, args) {
        const chatId = msg.chat.id;
        const userId = msg.from.id.toString();
        const username = msg.from.username || msg.from.first_name;

        // ƒê·ªçc d·ªØ li·ªáu users.json
        let users;
        try {
            users = JSON.parse(fs.readFileSync(USERS_FILE, "utf8"));
        } catch (error) {
            users = {};
        }

        // ƒê·ªçc d·ªØ li·ªáu Token t·ª´ file
        let dailyTokenData;
        try {
            dailyTokenData = JSON.parse(fs.readFileSync(TOKEN_FILE, "utf8"));
        } catch (error) {
            dailyTokenData = {};
        }

        const today = new Date().toDateString();

        // N·∫øu ch∆∞a c√≥ Token ho·∫∑c Token ƒë√£ h·∫øt h·∫°n, t·∫°o Token m·ªõi
        if (!dailyTokenData.date || dailyTokenData.date !== today) {
            const newToken = crypto.randomBytes(16).toString("hex"); // T·∫°o Token m·ªõi
            const luckyUserId = Object.keys(users)[Math.floor(Math.random() * Object.keys(users).length)]; // Ch·ªçn ng·∫´u nhi√™n 1 ng∆∞·ªùi

            dailyTokenData = {
                date: today,
                token: newToken,
                userId: luckyUserId,
                used: false
            };

            fs.writeFileSync(TOKEN_FILE, JSON.stringify(dailyTokenData, null, 2));

            if (luckyUserId) {
                bot.sendMessage(luckyUserId, `üéâ B·∫°n l√† ng∆∞·ªùi may m·∫Øn h√¥m nay!\nüîë Token Daily c·ªßa b·∫°n: \`${newToken}\`\n‚ö° S·ª≠ d·ª•ng ngay v·ªõi l·ªánh: \`/daily <TOKEN>\``, { parse_mode: "Markdown" });
            }
        }

        // N·∫øu kh√¥ng c√≥ Token ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng ph·∫£i l√† ng∆∞·ªùi ƒë∆∞·ª£c ch·ªçn
        if (dailyTokenData.userId !== userId) {
            return bot.sendMessage(chatId, "‚ùå H√¥m nay b·∫°n kh√¥ng c√≥ quy·ªÅn nh·∫≠n ti·ªÅn! H√£y ch·ªù ng√†y mai.");
        }

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ Token ho·∫∑c Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng
        if (dailyTokenData.used) {
            return bot.sendMessage(chatId, "‚è≥ Token ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng h√¥m nay! H√£y th·ª≠ l·∫°i v√†o ng√†y mai.");
        }

        // Ki·ªÉm tra c√∫ ph√°p l·ªánh
        if (args.length < 1) {
            return bot.sendMessage(chatId, "‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p Token ƒë·ªÉ nh·∫≠n ti·ªÅn!\nüîπ D√πng: `/daily <TOKEN>`", { parse_mode: "Markdown" });
        }

        const userToken = args[0];

        // Ki·ªÉm tra Token c√≥ h·ª£p l·ªá kh√¥ng
        if (userToken !== dailyTokenData.token) {
            return bot.sendMessage(chatId, "‚ùå Token kh√¥ng h·ª£p l·ªá! H√£y ki·ªÉm tra l·∫°i.");
        }

        // N·∫øu ng∆∞·ªùi d√πng ch∆∞a c√≥ trong danh s√°ch, t·∫°o m·ªõi
        if (!users[userId]) {
            users[userId] = {
                username: username,
                xu: 0
            };
        }

        // T·∫°o s·ªë ti·ªÅn ng·∫´u nhi√™n c·ªë ƒë·ªãnh theo ng√†y
        const hash = crypto.createHash("sha256").update(today).digest("hex");
        const randomValue = parseInt(hash.substring(0, 8), 16) % (MAX_AMOUNT - MIN_AMOUNT + 1) + MIN_AMOUNT;

        // C·ªông ti·ªÅn cho ng∆∞·ªùi d√πng
        users[userId].xu += randomValue;
        dailyTokenData.used = true; // ƒê√°nh d·∫•u Token ƒë√£ s·ª≠ d·ª•ng

        // L∆∞u l·∫°i d·ªØ li·ªáu
        fs.writeFileSync(USERS_FILE, JSON.stringify(users, null, 2));
        fs.writeFileSync(TOKEN_FILE, JSON.stringify(dailyTokenData, null, 2));

        // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        bot.sendMessage(chatId, `üéâ **Nh·∫≠n qu√† th√†nh c√¥ng!**\nüí∞ **B·∫°n nh·∫≠n ƒë∆∞·ª£c:** ${randomValue.toLocaleString()} Xu\nüîë **Token h·ª£p l·ªá!**\nüìÜ **H·∫πn g·∫∑p l·∫°i v√†o ng√†y mai!**`, { parse_mode: "Markdown" });
    }
};
